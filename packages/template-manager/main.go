package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"time"

	"github.com/X-code-interpreter/sandbox-backend/packages/shared/consts"
	"github.com/X-code-interpreter/sandbox-backend/packages/shared/telemetry"
	"github.com/X-code-interpreter/sandbox-backend/packages/template-manager/build"
	"github.com/docker/docker/client"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace/noop"
)

func Fatal(a ...any) {
	fmt.Fprint(os.Stderr, a...)
	os.Exit(1)
}

func Fatalf(format string, a ...any) {
	fmt.Fprintf(os.Stderr, format, a...)
	os.Exit(1)
}

func validateEnv(env *build.Env) error {
	if env.KernelVersion == "" {
		env.KernelVersion = consts.DefaultKernelVersion
	}
	if env.FirecrackerBinaryPath == "" {
		env.FirecrackerBinaryPath = "firecracker"
	}

	return env.VmTemplate.Validate()
}

// In original e2b, the template-manager is a server
// however, in our situation, we do not need to maintain
// a long-running template-manager, so we use it as a one-shot binary
func main() {
	var (
		templatePath string
		env          build.Env
		start        = time.Now()
	)
	flag.StringVar(&templatePath, "template", "", "path to the template configuration json files (e.g., my-fancy-sandbox.json)")
	flag.Parse()
	if templatePath == "" {
		Fatal("detect empty template path, please set --template <path to config json files>")
	}

	content, err := os.ReadFile(templatePath)
	if err != nil {
		Fatal("read template file err", err)
	}
	if err = json.Unmarshal(content, &env); err != nil {
		Fatal("deserialize template configuration file failed: ", err)
	}
	if err = validateEnv(&env); err != nil {
		Fatal("validate env err", err)
	}
	// init otel environment
	ctx := context.Background()
	// we disable metric for template-manager
	shutdown, err := telemetry.InitConsoleOTel(ctx, "template-manager", false)
	if err != nil {
		Fatal("init console otel error: ", err)
	}
	defer shutdown(ctx)

	// There are a bunch of trace generated by docker client
	// so I choose to disable it
	// however metric cannot be disable (as the docker client did provide an option to set it)
	// so leave it alone BAD :(
	dockerClient, err := client.NewClientWithOpts(
		client.FromEnv,
		client.WithAPIVersionNegotiation(),
		client.WithTraceProvider(noop.NewTracerProvider()),
	)
	if err != nil {
		Fatal("create docker client error: ", err)
	}

	if err := env.Build(ctx, otel.Tracer("template-manager"), dockerClient); err != nil {
		Fatal("build env error: ", err)
	}
	fmt.Printf("build succeed: take %s", time.Since(start))
}
