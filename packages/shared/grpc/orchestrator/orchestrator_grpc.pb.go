// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: orchestrator.proto

package orchestrator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sandbox_Create_FullMethodName   = "/Sandbox/Create"
	Sandbox_List_FullMethodName     = "/Sandbox/List"
	Sandbox_Delete_FullMethodName   = "/Sandbox/Delete"
	Sandbox_Deactive_FullMethodName = "/Sandbox/Deactive"
	Sandbox_Snapshot_FullMethodName = "/Sandbox/Snapshot"
	Sandbox_Search_FullMethodName   = "/Sandbox/Search"
	Sandbox_Purge_FullMethodName    = "/Sandbox/Purge"
)

// SandboxClient is the client API for Sandbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type SandboxClient interface {
	// Create is a gRPC service that creates a new sandbox.
	Create(ctx context.Context, in *SandboxCreateRequest, opts ...grpc.CallOption) (*SandboxCreateResponse, error)
	// List is a gRPC service that returns a list of all the sandboxes.
	List(ctx context.Context, in *SandboxListRequest, opts ...grpc.CallOption) (*SandboxListResponse, error)
	// Delete is a gRPC service that kills a sandbox.
	Delete(ctx context.Context, in *SandboxDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Invoke memory reclaim for a sandbox **on host**.
	Deactive(ctx context.Context, in *SandboxDeactivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Snapshot a sandbox with id
	Snapshot(ctx context.Context, in *SandboxSnapshotRequest, opts ...grpc.CallOption) (*SandboxSnapshotResponse, error)
	// search a sandbox with id
	Search(ctx context.Context, in *SandboxSearchRequest, opts ...grpc.CallOption) (*SandboxSearchResponse, error)
	// Purge will be invoked in rare case. typically when orchestrator crashes
	// and forget to cleanup the sandbox. So the client can call this method
	// to purge the orphan sandbox manually
	Purge(ctx context.Context, in *SandboxPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sandboxClient struct {
	cc grpc.ClientConnInterface
}

func NewSandboxClient(cc grpc.ClientConnInterface) SandboxClient {
	return &sandboxClient{cc}
}

func (c *sandboxClient) Create(ctx context.Context, in *SandboxCreateRequest, opts ...grpc.CallOption) (*SandboxCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxCreateResponse)
	err := c.cc.Invoke(ctx, Sandbox_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) List(ctx context.Context, in *SandboxListRequest, opts ...grpc.CallOption) (*SandboxListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxListResponse)
	err := c.cc.Invoke(ctx, Sandbox_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) Delete(ctx context.Context, in *SandboxDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Sandbox_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) Deactive(ctx context.Context, in *SandboxDeactivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Sandbox_Deactive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) Snapshot(ctx context.Context, in *SandboxSnapshotRequest, opts ...grpc.CallOption) (*SandboxSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxSnapshotResponse)
	err := c.cc.Invoke(ctx, Sandbox_Snapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) Search(ctx context.Context, in *SandboxSearchRequest, opts ...grpc.CallOption) (*SandboxSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SandboxSearchResponse)
	err := c.cc.Invoke(ctx, Sandbox_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) Purge(ctx context.Context, in *SandboxPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Sandbox_Purge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxServer is the server API for Sandbox service.
// All implementations must embed UnimplementedSandboxServer
// for forward compatibility.
//
// Interface exported by the server.
type SandboxServer interface {
	// Create is a gRPC service that creates a new sandbox.
	Create(context.Context, *SandboxCreateRequest) (*SandboxCreateResponse, error)
	// List is a gRPC service that returns a list of all the sandboxes.
	List(context.Context, *SandboxListRequest) (*SandboxListResponse, error)
	// Delete is a gRPC service that kills a sandbox.
	Delete(context.Context, *SandboxDeleteRequest) (*emptypb.Empty, error)
	// Invoke memory reclaim for a sandbox **on host**.
	Deactive(context.Context, *SandboxDeactivateRequest) (*emptypb.Empty, error)
	// Snapshot a sandbox with id
	Snapshot(context.Context, *SandboxSnapshotRequest) (*SandboxSnapshotResponse, error)
	// search a sandbox with id
	Search(context.Context, *SandboxSearchRequest) (*SandboxSearchResponse, error)
	// Purge will be invoked in rare case. typically when orchestrator crashes
	// and forget to cleanup the sandbox. So the client can call this method
	// to purge the orphan sandbox manually
	Purge(context.Context, *SandboxPurgeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSandboxServer()
}

// UnimplementedSandboxServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSandboxServer struct{}

func (UnimplementedSandboxServer) Create(context.Context, *SandboxCreateRequest) (*SandboxCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSandboxServer) List(context.Context, *SandboxListRequest) (*SandboxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSandboxServer) Delete(context.Context, *SandboxDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSandboxServer) Deactive(context.Context, *SandboxDeactivateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactive not implemented")
}
func (UnimplementedSandboxServer) Snapshot(context.Context, *SandboxSnapshotRequest) (*SandboxSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedSandboxServer) Search(context.Context, *SandboxSearchRequest) (*SandboxSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSandboxServer) Purge(context.Context, *SandboxPurgeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (UnimplementedSandboxServer) mustEmbedUnimplementedSandboxServer() {}
func (UnimplementedSandboxServer) testEmbeddedByValue()                 {}

// UnsafeSandboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandboxServer will
// result in compilation errors.
type UnsafeSandboxServer interface {
	mustEmbedUnimplementedSandboxServer()
}

func RegisterSandboxServer(s grpc.ServiceRegistrar, srv SandboxServer) {
	// If the following call pancis, it indicates UnimplementedSandboxServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sandbox_ServiceDesc, srv)
}

func _Sandbox_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandbox_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).Create(ctx, req.(*SandboxCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandbox_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).List(ctx, req.(*SandboxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandbox_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).Delete(ctx, req.(*SandboxDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_Deactive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxDeactivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).Deactive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandbox_Deactive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).Deactive(ctx, req.(*SandboxDeactivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandbox_Snapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).Snapshot(ctx, req.(*SandboxSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandbox_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).Search(ctx, req.(*SandboxSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandbox_Purge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).Purge(ctx, req.(*SandboxPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sandbox_ServiceDesc is the grpc.ServiceDesc for Sandbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sandbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sandbox",
	HandlerType: (*SandboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Sandbox_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Sandbox_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Sandbox_Delete_Handler,
		},
		{
			MethodName: "Deactive",
			Handler:    _Sandbox_Deactive_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _Sandbox_Snapshot_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Sandbox_Search_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _Sandbox_Purge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestrator.proto",
}

const (
	HostManage_RecreateCgroup_FullMethodName  = "/HostManage/RecreateCgroup"
	HostManage_CleanNetworkEnv_FullMethodName = "/HostManage/CleanNetworkEnv"
)

// HostManageClient is the client API for HostManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostManageClient interface {
	RecreateCgroup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CleanNetworkEnv(ctx context.Context, in *HostManageCleanNetworkEnvRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hostManageClient struct {
	cc grpc.ClientConnInterface
}

func NewHostManageClient(cc grpc.ClientConnInterface) HostManageClient {
	return &hostManageClient{cc}
}

func (c *hostManageClient) RecreateCgroup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HostManage_RecreateCgroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostManageClient) CleanNetworkEnv(ctx context.Context, in *HostManageCleanNetworkEnvRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HostManage_CleanNetworkEnv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostManageServer is the server API for HostManage service.
// All implementations must embed UnimplementedHostManageServer
// for forward compatibility.
type HostManageServer interface {
	RecreateCgroup(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CleanNetworkEnv(context.Context, *HostManageCleanNetworkEnvRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedHostManageServer()
}

// UnimplementedHostManageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostManageServer struct{}

func (UnimplementedHostManageServer) RecreateCgroup(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecreateCgroup not implemented")
}
func (UnimplementedHostManageServer) CleanNetworkEnv(context.Context, *HostManageCleanNetworkEnvRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanNetworkEnv not implemented")
}
func (UnimplementedHostManageServer) mustEmbedUnimplementedHostManageServer() {}
func (UnimplementedHostManageServer) testEmbeddedByValue()                    {}

// UnsafeHostManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostManageServer will
// result in compilation errors.
type UnsafeHostManageServer interface {
	mustEmbedUnimplementedHostManageServer()
}

func RegisterHostManageServer(s grpc.ServiceRegistrar, srv HostManageServer) {
	// If the following call pancis, it indicates UnimplementedHostManageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HostManage_ServiceDesc, srv)
}

func _HostManage_RecreateCgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostManageServer).RecreateCgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostManage_RecreateCgroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostManageServer).RecreateCgroup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostManage_CleanNetworkEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostManageCleanNetworkEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostManageServer).CleanNetworkEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostManage_CleanNetworkEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostManageServer).CleanNetworkEnv(ctx, req.(*HostManageCleanNetworkEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostManage_ServiceDesc is the grpc.ServiceDesc for HostManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HostManage",
	HandlerType: (*HostManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecreateCgroup",
			Handler:    _HostManage_RecreateCgroup_Handler,
		},
		{
			MethodName: "CleanNetworkEnv",
			Handler:    _HostManage_CleanNetworkEnv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestrator.proto",
}
